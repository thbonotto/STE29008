
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  000001e4  2**0
                  ALLOC
  3 .stab         000008a0  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030f  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	4d d0       	rcall	.+154    	; 0x136 <main>
  9c:	53 c0       	rjmp	.+166    	; 0x144 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <setup>:

static unsigned char led_msk = 0x04;
static unsigned char btn_msk = 0x08;
static unsigned char btn_val = 0;

void setup() {
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	*DDRD |= 0x04;
  a8:	80 91 00 01 	lds	r24, 0x0100
  ac:	90 91 01 01 	lds	r25, 0x0101
  b0:	20 91 00 01 	lds	r18, 0x0100
  b4:	30 91 01 01 	lds	r19, 0x0101
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	24 60       	ori	r18, 0x04	; 4
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <loop>:
void delay(){
	volatile unsigned long x = 0xffff;
	while(x--);
}
void loop() {
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	btn_val = *PIND & btn_msk;
  d0:	80 91 04 01 	lds	r24, 0x0104
  d4:	90 91 05 01 	lds	r25, 0x0105
  d8:	fc 01       	movw	r30, r24
  da:	90 81       	ld	r25, Z
  dc:	80 91 07 01 	lds	r24, 0x0107
  e0:	89 23       	and	r24, r25
  e2:	80 93 08 01 	sts	0x0108, r24
	if(btn_val)
  e6:	80 91 08 01 	lds	r24, 0x0108
  ea:	88 23       	and	r24, r24
  ec:	81 f0       	breq	.+32     	; 0x10e <loop+0x46>
// delay
		*PORTD |=  led_msk;
  ee:	80 91 02 01 	lds	r24, 0x0102
  f2:	90 91 03 01 	lds	r25, 0x0103
  f6:	20 91 02 01 	lds	r18, 0x0102
  fa:	30 91 03 01 	lds	r19, 0x0103
  fe:	f9 01       	movw	r30, r18
 100:	30 81       	ld	r19, Z
 102:	20 91 06 01 	lds	r18, 0x0106
 106:	23 2b       	or	r18, r19
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	11 c0       	rjmp	.+34     	; 0x130 <loop+0x68>
	else
		*PORTD  &=  ~led_msk;
 10e:	80 91 02 01 	lds	r24, 0x0102
 112:	90 91 03 01 	lds	r25, 0x0103
 116:	20 91 02 01 	lds	r18, 0x0102
 11a:	30 91 03 01 	lds	r19, 0x0103
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	32 2f       	mov	r19, r18
 124:	20 91 06 01 	lds	r18, 0x0106
 128:	20 95       	com	r18
 12a:	23 23       	and	r18, r19
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
}
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <main>:

int main() {
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	setup();
 13e:	b0 df       	rcall	.-160    	; 0xa0 <setup>
 140:	c3 df       	rcall	.-122    	; 0xc8 <loop>
	while(1)
		loop();
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0xa>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
