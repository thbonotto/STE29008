
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  0000031a  2**0
                  ALLOC
  3 .stab         00000a74  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003bb  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 01 	call	0x260	; 0x260 <main>
  9e:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
static unsigned char btn2_msk = 0x18; // 0001 1000

static unsigned char btn1_val = 0;
static unsigned char btn2_val = 0;

void setup() {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	*DDRD |= 0xD7; // 1101 0111
  ae:	80 91 08 01 	lds	r24, 0x0108
  b2:	90 91 09 01 	lds	r25, 0x0109
  b6:	20 91 08 01 	lds	r18, 0x0108
  ba:	30 91 09 01 	lds	r19, 0x0109
  be:	f9 01       	movw	r30, r18
  c0:	20 81       	ld	r18, Z
  c2:	27 6d       	ori	r18, 0xD7	; 215
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	*DDRB |= 0x03 ;// 0000 0011
  c8:	80 91 02 01 	lds	r24, 0x0102
  cc:	90 91 03 01 	lds	r25, 0x0103
  d0:	20 91 02 01 	lds	r18, 0x0102
  d4:	30 91 03 01 	lds	r19, 0x0103
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	23 60       	ori	r18, 0x03	; 3
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
}
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <delay>:
void delay(){
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <delay+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <delay+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long x = 0xffff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	ab 83       	std	Y+3, r26	; 0x03
 102:	bc 83       	std	Y+4, r27	; 0x04
	while(x--);
 104:	00 00       	nop
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	ab 81       	ldd	r26, Y+3	; 0x03
 10c:	bc 81       	ldd	r27, Y+4	; 0x04
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	a1 05       	cpc	r26, r1
 114:	b1 05       	cpc	r27, r1
 116:	09 f4       	brne	.+2      	; 0x11a <delay+0x32>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	a1 09       	sbc	r26, r1
 11e:	b1 09       	sbc	r27, r1
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	ab 83       	std	Y+3, r26	; 0x03
 126:	bc 83       	std	Y+4, r27	; 0x04
 128:	22 23       	and	r18, r18
 12a:	69 f7       	brne	.-38     	; 0x106 <delay+0x1e>
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <switch_led1>:

void switch_led1(){
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	static unsigned char led1_state = 0;
	led1_state = !led1_state;
 142:	90 91 13 01 	lds	r25, 0x0113
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	99 23       	and	r25, r25
 14a:	09 f0       	breq	.+2      	; 0x14e <switch_led1+0x14>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	80 93 13 01 	sts	0x0113, r24
	if(led1_state)
 152:	80 91 13 01 	lds	r24, 0x0113
 156:	88 23       	and	r24, r24
 158:	81 f0       	breq	.+32     	; 0x17a <switch_led1+0x40>
		*PORTB |= led1_msk;
 15a:	80 91 04 01 	lds	r24, 0x0104
 15e:	90 91 05 01 	lds	r25, 0x0105
 162:	20 91 04 01 	lds	r18, 0x0104
 166:	30 91 05 01 	lds	r19, 0x0105
 16a:	f9 01       	movw	r30, r18
 16c:	30 81       	ld	r19, Z
 16e:	20 91 0c 01 	lds	r18, 0x010C
 172:	23 2b       	or	r18, r19
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	11 c0       	rjmp	.+34     	; 0x19c <switch_led1+0x62>
	else 
		*PORTB &= ~led1_msk;
 17a:	80 91 04 01 	lds	r24, 0x0104
 17e:	90 91 05 01 	lds	r25, 0x0105
 182:	20 91 04 01 	lds	r18, 0x0104
 186:	30 91 05 01 	lds	r19, 0x0105
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	32 2f       	mov	r19, r18
 190:	20 91 0c 01 	lds	r18, 0x010C
 194:	20 95       	com	r18
 196:	23 23       	and	r18, r19
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
}
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <switch_led2>:

void switch_led2(){
 1a2:	df 93       	push	r29
 1a4:	cf 93       	push	r28
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	static unsigned char led2_state = 0;
	led2_state = !led2_state;
 1aa:	90 91 12 01 	lds	r25, 0x0112
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	99 23       	and	r25, r25
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <switch_led2+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	80 93 12 01 	sts	0x0112, r24
	if(led2_state)
 1ba:	80 91 12 01 	lds	r24, 0x0112
 1be:	88 23       	and	r24, r24
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <switch_led2+0x40>
		*PORTB |= led2_msk;
 1c2:	80 91 04 01 	lds	r24, 0x0104
 1c6:	90 91 05 01 	lds	r25, 0x0105
 1ca:	20 91 04 01 	lds	r18, 0x0104
 1ce:	30 91 05 01 	lds	r19, 0x0105
 1d2:	f9 01       	movw	r30, r18
 1d4:	30 81       	ld	r19, Z
 1d6:	20 91 0d 01 	lds	r18, 0x010D
 1da:	23 2b       	or	r18, r19
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <switch_led2+0x62>
	else 
		*PORTB &= ~led2_msk;
 1e2:	80 91 04 01 	lds	r24, 0x0104
 1e6:	90 91 05 01 	lds	r25, 0x0105
 1ea:	20 91 04 01 	lds	r18, 0x0104
 1ee:	30 91 05 01 	lds	r19, 0x0105
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	32 2f       	mov	r19, r18
 1f8:	20 91 0d 01 	lds	r18, 0x010D
 1fc:	20 95       	com	r18
 1fe:	23 23       	and	r18, r19
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
}
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <loop>:

void loop() {
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	btn1_val = *PIND & btn1_msk;
 212:	80 91 06 01 	lds	r24, 0x0106
 216:	90 91 07 01 	lds	r25, 0x0107
 21a:	fc 01       	movw	r30, r24
 21c:	90 81       	ld	r25, Z
 21e:	80 91 0e 01 	lds	r24, 0x010E
 222:	89 23       	and	r24, r25
 224:	80 93 10 01 	sts	0x0110, r24
	btn2_val = *PIND & btn2_msk;
 228:	80 91 06 01 	lds	r24, 0x0106
 22c:	90 91 07 01 	lds	r25, 0x0107
 230:	fc 01       	movw	r30, r24
 232:	90 81       	ld	r25, Z
 234:	80 91 0f 01 	lds	r24, 0x010F
 238:	89 23       	and	r24, r25
 23a:	80 93 11 01 	sts	0x0111, r24
	
	if(btn1_val)
 23e:	80 91 10 01 	lds	r24, 0x0110
 242:	88 23       	and	r24, r24
 244:	11 f0       	breq	.+4      	; 0x24a <loop+0x40>
		switch_led1();
 246:	0e 94 9d 00 	call	0x13a	; 0x13a <switch_led1>
	if(btn2_val)
 24a:	80 91 11 01 	lds	r24, 0x0111
 24e:	88 23       	and	r24, r24
 250:	11 f0       	breq	.+4      	; 0x256 <loop+0x4c>
		switch_led2();
 252:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <switch_led2>
		
	delay();
 256:	0e 94 74 00 	call	0xe8	; 0xe8 <delay>
}
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <main>:

int main() {
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	setup();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while(1)
		loop();
 26c:	0e 94 05 01 	call	0x20a	; 0x20a <loop>
 270:	fd cf       	rjmp	.-6      	; 0x26c <main+0xc>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
