
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800102  00800102  0000091e  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000867  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_1>
   8:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 03 	call	0x60e	; 0x60e <main>
  9e:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
static unsigned char led2_msk = 0x01; // 0000 0001

volatile unsigned char led1_state = 0;
volatile unsigned char led2_state = 0;

void setup() {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	milli_counter_start();
  ae:	0e 94 11 03 	call	0x622	; 0x622 <milli_counter_start>
	EIMSK = 0x03;
  b2:	8d e3       	ldi	r24, 0x3D	; 61
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	23 e0       	ldi	r18, 0x03	; 3
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	EICRA = 0x0f;
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f e0       	ldi	r18, 0x0F	; 15
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	DDRB = (1 << DDB1) | (1 << DDB0);
  c6:	84 e2       	ldi	r24, 0x24	; 36
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	23 e0       	ldi	r18, 0x03	; 3
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
}
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <delay>:
void delay() {
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	00 d0       	rcall	.+0      	; 0xdc <delay+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <delay+0x8>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long x = 0xffff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	ab 83       	std	Y+3, r26	; 0x03
  f0:	bc 83       	std	Y+4, r27	; 0x04
	while (x--)
  f2:	00 00       	nop
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	ab 81       	ldd	r26, Y+3	; 0x03
  fa:	bc 81       	ldd	r27, Y+4	; 0x04
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	a1 05       	cpc	r26, r1
 102:	b1 05       	cpc	r27, r1
 104:	09 f4       	brne	.+2      	; 0x108 <delay+0x32>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	a1 09       	sbc	r26, r1
 10c:	b1 09       	sbc	r27, r1
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	ab 83       	std	Y+3, r26	; 0x03
 114:	bc 83       	std	Y+4, r27	; 0x04
 116:	22 23       	and	r18, r18
 118:	69 f7       	brne	.-38     	; 0xf4 <delay+0x1e>
		;
}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	08 95       	ret

00000128 <__vector_1>:

ISR(INT0_vect) {
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 92       	push	r2
 134:	3f 92       	push	r3
 136:	4f 92       	push	r4
 138:	5f 92       	push	r5
 13a:	6f 92       	push	r6
 13c:	7f 92       	push	r7
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	28 97       	sbiw	r28, 0x08	; 8
 174:	de bf       	out	0x3e, r29	; 62
 176:	cd bf       	out	0x3d, r28	; 61
	static milli_counter_t lastInt = 0;
	if (milli_counter() >= lastInt + 50) {
 178:	0e 94 37 03 	call	0x66e	; 0x66e <milli_counter>
 17c:	22 2e       	mov	r2, r18
 17e:	33 2e       	mov	r3, r19
 180:	44 2e       	mov	r4, r20
 182:	55 2e       	mov	r5, r21
 184:	66 2e       	mov	r6, r22
 186:	77 2e       	mov	r7, r23
 188:	88 2e       	mov	r8, r24
 18a:	99 2e       	mov	r9, r25
 18c:	20 91 0c 01 	lds	r18, 0x010C
 190:	30 91 0d 01 	lds	r19, 0x010D
 194:	40 91 0e 01 	lds	r20, 0x010E
 198:	50 91 0f 01 	lds	r21, 0x010F
 19c:	60 91 10 01 	lds	r22, 0x0110
 1a0:	70 91 11 01 	lds	r23, 0x0111
 1a4:	80 91 12 01 	lds	r24, 0x0112
 1a8:	90 91 13 01 	lds	r25, 0x0113
 1ac:	e2 e3       	ldi	r30, 0x32	; 50
 1ae:	e9 83       	std	Y+1, r30	; 0x01
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	1b 82       	std	Y+3, r1	; 0x03
 1b4:	1c 82       	std	Y+4, r1	; 0x04
 1b6:	1d 82       	std	Y+5, r1	; 0x05
 1b8:	1e 82       	std	Y+6, r1	; 0x06
 1ba:	1f 82       	std	Y+7, r1	; 0x07
 1bc:	18 86       	std	Y+8, r1	; 0x08
 1be:	a9 80       	ldd	r10, Y+1	; 0x01
 1c0:	a2 0e       	add	r10, r18
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	a2 16       	cp	r10, r18
 1c6:	08 f0       	brcs	.+2      	; 0x1ca <__vector_1+0xa2>
 1c8:	e0 e0       	ldi	r30, 0x00	; 0
 1ca:	ba 80       	ldd	r11, Y+2	; 0x02
 1cc:	b3 0e       	add	r11, r19
 1ce:	a1 e0       	ldi	r26, 0x01	; 1
 1d0:	b3 16       	cp	r11, r19
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__vector_1+0xae>
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	fe 2f       	mov	r31, r30
 1d8:	fb 0d       	add	r31, r11
 1da:	e1 e0       	ldi	r30, 0x01	; 1
 1dc:	fb 15       	cp	r31, r11
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <__vector_1+0xba>
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	ae 2b       	or	r26, r30
 1e4:	bf 2e       	mov	r11, r31
 1e6:	cb 80       	ldd	r12, Y+3	; 0x03
 1e8:	c4 0e       	add	r12, r20
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	c4 16       	cp	r12, r20
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <__vector_1+0xca>
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	fa 2f       	mov	r31, r26
 1f4:	fc 0d       	add	r31, r12
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	fc 15       	cp	r31, r12
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <__vector_1+0xd6>
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	be 2b       	or	r27, r30
 200:	cf 2e       	mov	r12, r31
 202:	dc 80       	ldd	r13, Y+4	; 0x04
 204:	d5 0e       	add	r13, r21
 206:	a1 e0       	ldi	r26, 0x01	; 1
 208:	d5 16       	cp	r13, r21
 20a:	08 f0       	brcs	.+2      	; 0x20e <__vector_1+0xe6>
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	fb 2f       	mov	r31, r27
 210:	fd 0d       	add	r31, r13
 212:	e1 e0       	ldi	r30, 0x01	; 1
 214:	fd 15       	cp	r31, r13
 216:	08 f0       	brcs	.+2      	; 0x21a <__vector_1+0xf2>
 218:	e0 e0       	ldi	r30, 0x00	; 0
 21a:	ae 2b       	or	r26, r30
 21c:	df 2e       	mov	r13, r31
 21e:	ed 80       	ldd	r14, Y+5	; 0x05
 220:	e6 0e       	add	r14, r22
 222:	b1 e0       	ldi	r27, 0x01	; 1
 224:	e6 16       	cp	r14, r22
 226:	08 f0       	brcs	.+2      	; 0x22a <__vector_1+0x102>
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	fa 2f       	mov	r31, r26
 22c:	fe 0d       	add	r31, r14
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	fe 15       	cp	r31, r14
 232:	08 f0       	brcs	.+2      	; 0x236 <__vector_1+0x10e>
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	be 2b       	or	r27, r30
 238:	ef 2e       	mov	r14, r31
 23a:	fe 80       	ldd	r15, Y+6	; 0x06
 23c:	f7 0e       	add	r15, r23
 23e:	a1 e0       	ldi	r26, 0x01	; 1
 240:	f7 16       	cp	r15, r23
 242:	08 f0       	brcs	.+2      	; 0x246 <__vector_1+0x11e>
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	fb 2f       	mov	r31, r27
 248:	ff 0d       	add	r31, r15
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	ff 15       	cp	r31, r15
 24e:	08 f0       	brcs	.+2      	; 0x252 <__vector_1+0x12a>
 250:	e0 e0       	ldi	r30, 0x00	; 0
 252:	ae 2b       	or	r26, r30
 254:	ff 2e       	mov	r15, r31
 256:	0f 81       	ldd	r16, Y+7	; 0x07
 258:	08 0f       	add	r16, r24
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	08 17       	cp	r16, r24
 25e:	08 f0       	brcs	.+2      	; 0x262 <__vector_1+0x13a>
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	a0 0f       	add	r26, r16
 264:	e1 e0       	ldi	r30, 0x01	; 1
 266:	a0 17       	cp	r26, r16
 268:	08 f0       	brcs	.+2      	; 0x26c <__vector_1+0x144>
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	fe 2b       	or	r31, r30
 26e:	0a 2f       	mov	r16, r26
 270:	18 85       	ldd	r17, Y+8	; 0x08
 272:	19 0f       	add	r17, r25
 274:	8f 2f       	mov	r24, r31
 276:	81 0f       	add	r24, r17
 278:	18 2f       	mov	r17, r24
 27a:	2a 2d       	mov	r18, r10
 27c:	3b 2d       	mov	r19, r11
 27e:	4c 2d       	mov	r20, r12
 280:	5d 2d       	mov	r21, r13
 282:	6e 2d       	mov	r22, r14
 284:	7f 2d       	mov	r23, r15
 286:	80 2f       	mov	r24, r16
 288:	91 2f       	mov	r25, r17
 28a:	99 16       	cp	r9, r25
 28c:	08 f4       	brcc	.+2      	; 0x290 <__vector_1+0x168>
 28e:	3e c0       	rjmp	.+124    	; 0x30c <__vector_1+0x1e4>
 290:	99 15       	cp	r25, r9
 292:	d1 f4       	brne	.+52     	; 0x2c8 <__vector_1+0x1a0>
 294:	88 16       	cp	r8, r24
 296:	d0 f1       	brcs	.+116    	; 0x30c <__vector_1+0x1e4>
 298:	88 15       	cp	r24, r8
 29a:	b1 f4       	brne	.+44     	; 0x2c8 <__vector_1+0x1a0>
 29c:	77 16       	cp	r7, r23
 29e:	b0 f1       	brcs	.+108    	; 0x30c <__vector_1+0x1e4>
 2a0:	77 15       	cp	r23, r7
 2a2:	91 f4       	brne	.+36     	; 0x2c8 <__vector_1+0x1a0>
 2a4:	66 16       	cp	r6, r22
 2a6:	90 f1       	brcs	.+100    	; 0x30c <__vector_1+0x1e4>
 2a8:	66 15       	cp	r22, r6
 2aa:	71 f4       	brne	.+28     	; 0x2c8 <__vector_1+0x1a0>
 2ac:	55 16       	cp	r5, r21
 2ae:	70 f1       	brcs	.+92     	; 0x30c <__vector_1+0x1e4>
 2b0:	55 15       	cp	r21, r5
 2b2:	51 f4       	brne	.+20     	; 0x2c8 <__vector_1+0x1a0>
 2b4:	44 16       	cp	r4, r20
 2b6:	50 f1       	brcs	.+84     	; 0x30c <__vector_1+0x1e4>
 2b8:	44 15       	cp	r20, r4
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <__vector_1+0x1a0>
 2bc:	33 16       	cp	r3, r19
 2be:	30 f1       	brcs	.+76     	; 0x30c <__vector_1+0x1e4>
 2c0:	33 15       	cp	r19, r3
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <__vector_1+0x1a0>
 2c4:	22 16       	cp	r2, r18
 2c6:	10 f1       	brcs	.+68     	; 0x30c <__vector_1+0x1e4>
		led1_state = !led1_state;
 2c8:	90 91 02 01 	lds	r25, 0x0102
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	99 23       	and	r25, r25
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <__vector_1+0x1ac>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	80 93 02 01 	sts	0x0102, r24
		lastInt = milli_counter();
 2d8:	0e 94 37 03 	call	0x66e	; 0x66e <milli_counter>
 2dc:	a2 2e       	mov	r10, r18
 2de:	b3 2e       	mov	r11, r19
 2e0:	c4 2e       	mov	r12, r20
 2e2:	d5 2e       	mov	r13, r21
 2e4:	e6 2e       	mov	r14, r22
 2e6:	f7 2e       	mov	r15, r23
 2e8:	08 2f       	mov	r16, r24
 2ea:	19 2f       	mov	r17, r25
 2ec:	a0 92 0c 01 	sts	0x010C, r10
 2f0:	b0 92 0d 01 	sts	0x010D, r11
 2f4:	c0 92 0e 01 	sts	0x010E, r12
 2f8:	d0 92 0f 01 	sts	0x010F, r13
 2fc:	e0 92 10 01 	sts	0x0110, r14
 300:	f0 92 11 01 	sts	0x0111, r15
 304:	00 93 12 01 	sts	0x0112, r16
 308:	10 93 13 01 	sts	0x0113, r17
	}
}
 30c:	28 96       	adiw	r28, 0x08	; 8
 30e:	de bf       	out	0x3e, r29	; 62
 310:	cd bf       	out	0x3d, r28	; 61
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	df 90       	pop	r13
 338:	cf 90       	pop	r12
 33a:	bf 90       	pop	r11
 33c:	af 90       	pop	r10
 33e:	9f 90       	pop	r9
 340:	8f 90       	pop	r8
 342:	7f 90       	pop	r7
 344:	6f 90       	pop	r6
 346:	5f 90       	pop	r5
 348:	4f 90       	pop	r4
 34a:	3f 90       	pop	r3
 34c:	2f 90       	pop	r2
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_2>:

ISR(INT1_vect) {
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 92       	push	r2
 364:	3f 92       	push	r3
 366:	4f 92       	push	r4
 368:	5f 92       	push	r5
 36a:	6f 92       	push	r6
 36c:	7f 92       	push	r7
 36e:	8f 92       	push	r8
 370:	9f 92       	push	r9
 372:	af 92       	push	r10
 374:	bf 92       	push	r11
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	28 97       	sbiw	r28, 0x08	; 8
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	cd bf       	out	0x3d, r28	; 61
	static milli_counter_t lastInt = 0;
	if (milli_counter() >= lastInt + 50) {
 3a8:	0e 94 37 03 	call	0x66e	; 0x66e <milli_counter>
 3ac:	22 2e       	mov	r2, r18
 3ae:	33 2e       	mov	r3, r19
 3b0:	44 2e       	mov	r4, r20
 3b2:	55 2e       	mov	r5, r21
 3b4:	66 2e       	mov	r6, r22
 3b6:	77 2e       	mov	r7, r23
 3b8:	88 2e       	mov	r8, r24
 3ba:	99 2e       	mov	r9, r25
 3bc:	20 91 04 01 	lds	r18, 0x0104
 3c0:	30 91 05 01 	lds	r19, 0x0105
 3c4:	40 91 06 01 	lds	r20, 0x0106
 3c8:	50 91 07 01 	lds	r21, 0x0107
 3cc:	60 91 08 01 	lds	r22, 0x0108
 3d0:	70 91 09 01 	lds	r23, 0x0109
 3d4:	80 91 0a 01 	lds	r24, 0x010A
 3d8:	90 91 0b 01 	lds	r25, 0x010B
 3dc:	e2 e3       	ldi	r30, 0x32	; 50
 3de:	e9 83       	std	Y+1, r30	; 0x01
 3e0:	1a 82       	std	Y+2, r1	; 0x02
 3e2:	1b 82       	std	Y+3, r1	; 0x03
 3e4:	1c 82       	std	Y+4, r1	; 0x04
 3e6:	1d 82       	std	Y+5, r1	; 0x05
 3e8:	1e 82       	std	Y+6, r1	; 0x06
 3ea:	1f 82       	std	Y+7, r1	; 0x07
 3ec:	18 86       	std	Y+8, r1	; 0x08
 3ee:	a9 80       	ldd	r10, Y+1	; 0x01
 3f0:	a2 0e       	add	r10, r18
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	a2 16       	cp	r10, r18
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <__vector_2+0xa2>
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	ba 80       	ldd	r11, Y+2	; 0x02
 3fc:	b3 0e       	add	r11, r19
 3fe:	a1 e0       	ldi	r26, 0x01	; 1
 400:	b3 16       	cp	r11, r19
 402:	08 f0       	brcs	.+2      	; 0x406 <__vector_2+0xae>
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	fe 2f       	mov	r31, r30
 408:	fb 0d       	add	r31, r11
 40a:	e1 e0       	ldi	r30, 0x01	; 1
 40c:	fb 15       	cp	r31, r11
 40e:	08 f0       	brcs	.+2      	; 0x412 <__vector_2+0xba>
 410:	e0 e0       	ldi	r30, 0x00	; 0
 412:	ae 2b       	or	r26, r30
 414:	bf 2e       	mov	r11, r31
 416:	cb 80       	ldd	r12, Y+3	; 0x03
 418:	c4 0e       	add	r12, r20
 41a:	b1 e0       	ldi	r27, 0x01	; 1
 41c:	c4 16       	cp	r12, r20
 41e:	08 f0       	brcs	.+2      	; 0x422 <__vector_2+0xca>
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	fa 2f       	mov	r31, r26
 424:	fc 0d       	add	r31, r12
 426:	e1 e0       	ldi	r30, 0x01	; 1
 428:	fc 15       	cp	r31, r12
 42a:	08 f0       	brcs	.+2      	; 0x42e <__vector_2+0xd6>
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	be 2b       	or	r27, r30
 430:	cf 2e       	mov	r12, r31
 432:	dc 80       	ldd	r13, Y+4	; 0x04
 434:	d5 0e       	add	r13, r21
 436:	a1 e0       	ldi	r26, 0x01	; 1
 438:	d5 16       	cp	r13, r21
 43a:	08 f0       	brcs	.+2      	; 0x43e <__vector_2+0xe6>
 43c:	a0 e0       	ldi	r26, 0x00	; 0
 43e:	fb 2f       	mov	r31, r27
 440:	fd 0d       	add	r31, r13
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	fd 15       	cp	r31, r13
 446:	08 f0       	brcs	.+2      	; 0x44a <__vector_2+0xf2>
 448:	e0 e0       	ldi	r30, 0x00	; 0
 44a:	ae 2b       	or	r26, r30
 44c:	df 2e       	mov	r13, r31
 44e:	ed 80       	ldd	r14, Y+5	; 0x05
 450:	e6 0e       	add	r14, r22
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	e6 16       	cp	r14, r22
 456:	08 f0       	brcs	.+2      	; 0x45a <__vector_2+0x102>
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	fa 2f       	mov	r31, r26
 45c:	fe 0d       	add	r31, r14
 45e:	e1 e0       	ldi	r30, 0x01	; 1
 460:	fe 15       	cp	r31, r14
 462:	08 f0       	brcs	.+2      	; 0x466 <__vector_2+0x10e>
 464:	e0 e0       	ldi	r30, 0x00	; 0
 466:	be 2b       	or	r27, r30
 468:	ef 2e       	mov	r14, r31
 46a:	fe 80       	ldd	r15, Y+6	; 0x06
 46c:	f7 0e       	add	r15, r23
 46e:	a1 e0       	ldi	r26, 0x01	; 1
 470:	f7 16       	cp	r15, r23
 472:	08 f0       	brcs	.+2      	; 0x476 <__vector_2+0x11e>
 474:	a0 e0       	ldi	r26, 0x00	; 0
 476:	fb 2f       	mov	r31, r27
 478:	ff 0d       	add	r31, r15
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	ff 15       	cp	r31, r15
 47e:	08 f0       	brcs	.+2      	; 0x482 <__vector_2+0x12a>
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	ae 2b       	or	r26, r30
 484:	ff 2e       	mov	r15, r31
 486:	0f 81       	ldd	r16, Y+7	; 0x07
 488:	08 0f       	add	r16, r24
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	08 17       	cp	r16, r24
 48e:	08 f0       	brcs	.+2      	; 0x492 <__vector_2+0x13a>
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	a0 0f       	add	r26, r16
 494:	e1 e0       	ldi	r30, 0x01	; 1
 496:	a0 17       	cp	r26, r16
 498:	08 f0       	brcs	.+2      	; 0x49c <__vector_2+0x144>
 49a:	e0 e0       	ldi	r30, 0x00	; 0
 49c:	fe 2b       	or	r31, r30
 49e:	0a 2f       	mov	r16, r26
 4a0:	18 85       	ldd	r17, Y+8	; 0x08
 4a2:	19 0f       	add	r17, r25
 4a4:	8f 2f       	mov	r24, r31
 4a6:	81 0f       	add	r24, r17
 4a8:	18 2f       	mov	r17, r24
 4aa:	2a 2d       	mov	r18, r10
 4ac:	3b 2d       	mov	r19, r11
 4ae:	4c 2d       	mov	r20, r12
 4b0:	5d 2d       	mov	r21, r13
 4b2:	6e 2d       	mov	r22, r14
 4b4:	7f 2d       	mov	r23, r15
 4b6:	80 2f       	mov	r24, r16
 4b8:	91 2f       	mov	r25, r17
 4ba:	99 16       	cp	r9, r25
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <__vector_2+0x168>
 4be:	3e c0       	rjmp	.+124    	; 0x53c <__vector_2+0x1e4>
 4c0:	99 15       	cp	r25, r9
 4c2:	d1 f4       	brne	.+52     	; 0x4f8 <__vector_2+0x1a0>
 4c4:	88 16       	cp	r8, r24
 4c6:	d0 f1       	brcs	.+116    	; 0x53c <__vector_2+0x1e4>
 4c8:	88 15       	cp	r24, r8
 4ca:	b1 f4       	brne	.+44     	; 0x4f8 <__vector_2+0x1a0>
 4cc:	77 16       	cp	r7, r23
 4ce:	b0 f1       	brcs	.+108    	; 0x53c <__vector_2+0x1e4>
 4d0:	77 15       	cp	r23, r7
 4d2:	91 f4       	brne	.+36     	; 0x4f8 <__vector_2+0x1a0>
 4d4:	66 16       	cp	r6, r22
 4d6:	90 f1       	brcs	.+100    	; 0x53c <__vector_2+0x1e4>
 4d8:	66 15       	cp	r22, r6
 4da:	71 f4       	brne	.+28     	; 0x4f8 <__vector_2+0x1a0>
 4dc:	55 16       	cp	r5, r21
 4de:	70 f1       	brcs	.+92     	; 0x53c <__vector_2+0x1e4>
 4e0:	55 15       	cp	r21, r5
 4e2:	51 f4       	brne	.+20     	; 0x4f8 <__vector_2+0x1a0>
 4e4:	44 16       	cp	r4, r20
 4e6:	50 f1       	brcs	.+84     	; 0x53c <__vector_2+0x1e4>
 4e8:	44 15       	cp	r20, r4
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <__vector_2+0x1a0>
 4ec:	33 16       	cp	r3, r19
 4ee:	30 f1       	brcs	.+76     	; 0x53c <__vector_2+0x1e4>
 4f0:	33 15       	cp	r19, r3
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__vector_2+0x1a0>
 4f4:	22 16       	cp	r2, r18
 4f6:	10 f1       	brcs	.+68     	; 0x53c <__vector_2+0x1e4>
		led2_state = !led2_state;
 4f8:	90 91 03 01 	lds	r25, 0x0103
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	99 23       	and	r25, r25
 500:	09 f0       	breq	.+2      	; 0x504 <__vector_2+0x1ac>
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	80 93 03 01 	sts	0x0103, r24
		lastInt = milli_counter();
 508:	0e 94 37 03 	call	0x66e	; 0x66e <milli_counter>
 50c:	a2 2e       	mov	r10, r18
 50e:	b3 2e       	mov	r11, r19
 510:	c4 2e       	mov	r12, r20
 512:	d5 2e       	mov	r13, r21
 514:	e6 2e       	mov	r14, r22
 516:	f7 2e       	mov	r15, r23
 518:	08 2f       	mov	r16, r24
 51a:	19 2f       	mov	r17, r25
 51c:	a0 92 04 01 	sts	0x0104, r10
 520:	b0 92 05 01 	sts	0x0105, r11
 524:	c0 92 06 01 	sts	0x0106, r12
 528:	d0 92 07 01 	sts	0x0107, r13
 52c:	e0 92 08 01 	sts	0x0108, r14
 530:	f0 92 09 01 	sts	0x0109, r15
 534:	00 93 0a 01 	sts	0x010A, r16
 538:	10 93 0b 01 	sts	0x010B, r17
	}
}
 53c:	28 96       	adiw	r28, 0x08	; 8
 53e:	de bf       	out	0x3e, r29	; 62
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	7f 90       	pop	r7
 574:	6f 90       	pop	r6
 576:	5f 90       	pop	r5
 578:	4f 90       	pop	r4
 57a:	3f 90       	pop	r3
 57c:	2f 90       	pop	r2
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <loop>:

void loop() {
 588:	df 93       	push	r29
 58a:	cf 93       	push	r28
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
	if (led1_state)
 590:	80 91 02 01 	lds	r24, 0x0102
 594:	88 23       	and	r24, r24
 596:	61 f0       	breq	.+24     	; 0x5b0 <loop+0x28>
		PORTB |= led1_msk;
 598:	85 e2       	ldi	r24, 0x25	; 37
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	25 e2       	ldi	r18, 0x25	; 37
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	30 81       	ld	r19, Z
 5a4:	20 91 00 01 	lds	r18, 0x0100
 5a8:	23 2b       	or	r18, r19
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <loop+0x42>
	else
		PORTB &= ~led1_msk;
 5b0:	85 e2       	ldi	r24, 0x25	; 37
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	25 e2       	ldi	r18, 0x25	; 37
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	32 2f       	mov	r19, r18
 5be:	20 91 00 01 	lds	r18, 0x0100
 5c2:	20 95       	com	r18
 5c4:	23 23       	and	r18, r19
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
	if (led2_state)
 5ca:	80 91 03 01 	lds	r24, 0x0103
 5ce:	88 23       	and	r24, r24
 5d0:	61 f0       	breq	.+24     	; 0x5ea <loop+0x62>
		PORTB |= led2_msk;
 5d2:	85 e2       	ldi	r24, 0x25	; 37
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	25 e2       	ldi	r18, 0x25	; 37
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	30 81       	ld	r19, Z
 5de:	20 91 01 01 	lds	r18, 0x0101
 5e2:	23 2b       	or	r18, r19
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <loop+0x7c>
	else
		PORTB &= ~led2_msk;
 5ea:	85 e2       	ldi	r24, 0x25	; 37
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	25 e2       	ldi	r18, 0x25	; 37
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	f9 01       	movw	r30, r18
 5f4:	20 81       	ld	r18, Z
 5f6:	32 2f       	mov	r19, r18
 5f8:	20 91 01 01 	lds	r18, 0x0101
 5fc:	20 95       	com	r18
 5fe:	23 23       	and	r18, r19
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18

	delay();
 604:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
}
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	08 95       	ret

0000060e <main>:

int main() {
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
	setup();
 616:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	asm("sei");
 61a:	78 94       	sei
	while (1)
		loop();
 61c:	0e 94 c4 02 	call	0x588	; 0x588 <loop>
 620:	fd cf       	rjmp	.-6      	; 0x61c <main+0xe>

00000622 <milli_counter_start>:
#include "milli_counter.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void milli_counter_start()
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
    milli_counter_ms = 0;
 62a:	10 92 14 01 	sts	0x0114, r1
 62e:	10 92 15 01 	sts	0x0115, r1
 632:	10 92 16 01 	sts	0x0116, r1
 636:	10 92 17 01 	sts	0x0117, r1
 63a:	10 92 18 01 	sts	0x0118, r1
 63e:	10 92 19 01 	sts	0x0119, r1
 642:	10 92 1a 01 	sts	0x011A, r1
 646:	10 92 1b 01 	sts	0x011B, r1

    TCCR0B = 0x05; //Init Timer0, normal, prescalar = 1024
 64a:	85 e4       	ldi	r24, 0x45	; 69
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	25 e0       	ldi	r18, 0x05	; 5
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
    TCNT0 = 0xF0; //16 clock cycles
 654:	86 e4       	ldi	r24, 0x46	; 70
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	20 ef       	ldi	r18, 0xF0	; 240
 65a:	fc 01       	movw	r30, r24
 65c:	20 83       	st	Z, r18
    TIMSK0 = 0x01; //Set TOIE bit
 65e:	8e e6       	ldi	r24, 0x6E	; 110
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
}
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <milli_counter>:

milli_counter_t milli_counter()
{
 66e:	af 92       	push	r10
 670:	bf 92       	push	r11
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	df 93       	push	r29
 680:	cf 93       	push	r28
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
    return milli_counter_ms;
 686:	20 91 14 01 	lds	r18, 0x0114
 68a:	30 91 15 01 	lds	r19, 0x0115
 68e:	40 91 16 01 	lds	r20, 0x0116
 692:	50 91 17 01 	lds	r21, 0x0117
 696:	60 91 18 01 	lds	r22, 0x0118
 69a:	70 91 19 01 	lds	r23, 0x0119
 69e:	80 91 1a 01 	lds	r24, 0x011A
 6a2:	90 91 1b 01 	lds	r25, 0x011B
 6a6:	a2 2e       	mov	r10, r18
 6a8:	b3 2e       	mov	r11, r19
 6aa:	c4 2e       	mov	r12, r20
 6ac:	d5 2e       	mov	r13, r21
 6ae:	e6 2e       	mov	r14, r22
 6b0:	f7 2e       	mov	r15, r23
 6b2:	08 2f       	mov	r16, r24
 6b4:	19 2f       	mov	r17, r25
}
 6b6:	2a 2d       	mov	r18, r10
 6b8:	3b 2d       	mov	r19, r11
 6ba:	4c 2d       	mov	r20, r12
 6bc:	5d 2d       	mov	r21, r13
 6be:	6e 2d       	mov	r22, r14
 6c0:	7f 2d       	mov	r23, r15
 6c2:	80 2f       	mov	r24, r16
 6c4:	91 2f       	mov	r25, r17
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	bf 90       	pop	r11
 6d8:	af 90       	pop	r10
 6da:	08 95       	ret

000006dc <__vector_16>:

ISR(TIMER0_OVF_vect) {
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	2f 92       	push	r2
 6e8:	3f 92       	push	r3
 6ea:	4f 92       	push	r4
 6ec:	5f 92       	push	r5
 6ee:	6f 92       	push	r6
 6f0:	7f 92       	push	r7
 6f2:	8f 92       	push	r8
 6f4:	9f 92       	push	r9
 6f6:	af 92       	push	r10
 6f8:	bf 92       	push	r11
 6fa:	cf 92       	push	r12
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	2f 93       	push	r18
 708:	3f 93       	push	r19
 70a:	4f 93       	push	r20
 70c:	5f 93       	push	r21
 70e:	6f 93       	push	r22
 710:	7f 93       	push	r23
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
 71c:	df 93       	push	r29
 71e:	cf 93       	push	r28
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
    TCNT0 = 0xF0;
 724:	86 e4       	ldi	r24, 0x46	; 70
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	20 ef       	ldi	r18, 0xF0	; 240
 72a:	fc 01       	movw	r30, r24
 72c:	20 83       	st	Z, r18
    milli_counter_ms++;
 72e:	a0 90 14 01 	lds	r10, 0x0114
 732:	b0 90 15 01 	lds	r11, 0x0115
 736:	c0 90 16 01 	lds	r12, 0x0116
 73a:	d0 90 17 01 	lds	r13, 0x0117
 73e:	e0 90 18 01 	lds	r14, 0x0118
 742:	f0 90 19 01 	lds	r15, 0x0119
 746:	00 91 1a 01 	lds	r16, 0x011A
 74a:	10 91 1b 01 	lds	r17, 0x011B
 74e:	22 24       	eor	r2, r2
 750:	23 94       	inc	r2
 752:	33 24       	eor	r3, r3
 754:	44 24       	eor	r4, r4
 756:	55 24       	eor	r5, r5
 758:	66 24       	eor	r6, r6
 75a:	77 24       	eor	r7, r7
 75c:	88 24       	eor	r8, r8
 75e:	99 24       	eor	r9, r9
 760:	2a 2d       	mov	r18, r10
 762:	22 0d       	add	r18, r2
 764:	e1 e0       	ldi	r30, 0x01	; 1
 766:	2a 15       	cp	r18, r10
 768:	08 f0       	brcs	.+2      	; 0x76c <__vector_16+0x90>
 76a:	e0 e0       	ldi	r30, 0x00	; 0
 76c:	3b 2d       	mov	r19, r11
 76e:	33 0d       	add	r19, r3
 770:	f1 e0       	ldi	r31, 0x01	; 1
 772:	3b 15       	cp	r19, r11
 774:	08 f0       	brcs	.+2      	; 0x778 <__vector_16+0x9c>
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	e3 0f       	add	r30, r19
 77a:	a1 e0       	ldi	r26, 0x01	; 1
 77c:	e3 17       	cp	r30, r19
 77e:	08 f0       	brcs	.+2      	; 0x782 <__vector_16+0xa6>
 780:	a0 e0       	ldi	r26, 0x00	; 0
 782:	fa 2b       	or	r31, r26
 784:	3e 2f       	mov	r19, r30
 786:	4c 2d       	mov	r20, r12
 788:	44 0d       	add	r20, r4
 78a:	e1 e0       	ldi	r30, 0x01	; 1
 78c:	4c 15       	cp	r20, r12
 78e:	08 f0       	brcs	.+2      	; 0x792 <__vector_16+0xb6>
 790:	e0 e0       	ldi	r30, 0x00	; 0
 792:	f4 0f       	add	r31, r20
 794:	a1 e0       	ldi	r26, 0x01	; 1
 796:	f4 17       	cp	r31, r20
 798:	08 f0       	brcs	.+2      	; 0x79c <__vector_16+0xc0>
 79a:	a0 e0       	ldi	r26, 0x00	; 0
 79c:	ea 2b       	or	r30, r26
 79e:	4f 2f       	mov	r20, r31
 7a0:	5d 2d       	mov	r21, r13
 7a2:	55 0d       	add	r21, r5
 7a4:	f1 e0       	ldi	r31, 0x01	; 1
 7a6:	5d 15       	cp	r21, r13
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__vector_16+0xd0>
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	e5 0f       	add	r30, r21
 7ae:	a1 e0       	ldi	r26, 0x01	; 1
 7b0:	e5 17       	cp	r30, r21
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__vector_16+0xda>
 7b4:	a0 e0       	ldi	r26, 0x00	; 0
 7b6:	fa 2b       	or	r31, r26
 7b8:	5e 2f       	mov	r21, r30
 7ba:	6e 2d       	mov	r22, r14
 7bc:	66 0d       	add	r22, r6
 7be:	e1 e0       	ldi	r30, 0x01	; 1
 7c0:	6e 15       	cp	r22, r14
 7c2:	08 f0       	brcs	.+2      	; 0x7c6 <__vector_16+0xea>
 7c4:	e0 e0       	ldi	r30, 0x00	; 0
 7c6:	f6 0f       	add	r31, r22
 7c8:	a1 e0       	ldi	r26, 0x01	; 1
 7ca:	f6 17       	cp	r31, r22
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__vector_16+0xf4>
 7ce:	a0 e0       	ldi	r26, 0x00	; 0
 7d0:	ea 2b       	or	r30, r26
 7d2:	6f 2f       	mov	r22, r31
 7d4:	7f 2d       	mov	r23, r15
 7d6:	77 0d       	add	r23, r7
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	7f 15       	cp	r23, r15
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <__vector_16+0x104>
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	e7 0f       	add	r30, r23
 7e2:	a1 e0       	ldi	r26, 0x01	; 1
 7e4:	e7 17       	cp	r30, r23
 7e6:	08 f0       	brcs	.+2      	; 0x7ea <__vector_16+0x10e>
 7e8:	a0 e0       	ldi	r26, 0x00	; 0
 7ea:	fa 2b       	or	r31, r26
 7ec:	7e 2f       	mov	r23, r30
 7ee:	80 2f       	mov	r24, r16
 7f0:	88 0d       	add	r24, r8
 7f2:	e1 e0       	ldi	r30, 0x01	; 1
 7f4:	80 17       	cp	r24, r16
 7f6:	08 f0       	brcs	.+2      	; 0x7fa <__vector_16+0x11e>
 7f8:	e0 e0       	ldi	r30, 0x00	; 0
 7fa:	f8 0f       	add	r31, r24
 7fc:	a1 e0       	ldi	r26, 0x01	; 1
 7fe:	f8 17       	cp	r31, r24
 800:	08 f0       	brcs	.+2      	; 0x804 <__vector_16+0x128>
 802:	a0 e0       	ldi	r26, 0x00	; 0
 804:	ea 2b       	or	r30, r26
 806:	8f 2f       	mov	r24, r31
 808:	91 2f       	mov	r25, r17
 80a:	99 0d       	add	r25, r9
 80c:	e9 0f       	add	r30, r25
 80e:	9e 2f       	mov	r25, r30
 810:	a2 2e       	mov	r10, r18
 812:	b3 2e       	mov	r11, r19
 814:	c4 2e       	mov	r12, r20
 816:	d5 2e       	mov	r13, r21
 818:	e6 2e       	mov	r14, r22
 81a:	f7 2e       	mov	r15, r23
 81c:	08 2f       	mov	r16, r24
 81e:	19 2f       	mov	r17, r25
 820:	a0 92 14 01 	sts	0x0114, r10
 824:	b0 92 15 01 	sts	0x0115, r11
 828:	c0 92 16 01 	sts	0x0116, r12
 82c:	d0 92 17 01 	sts	0x0117, r13
 830:	e0 92 18 01 	sts	0x0118, r14
 834:	f0 92 19 01 	sts	0x0119, r15
 838:	00 93 1a 01 	sts	0x011A, r16
 83c:	10 93 1b 01 	sts	0x011B, r17
}
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	ff 90       	pop	r15
 860:	ef 90       	pop	r14
 862:	df 90       	pop	r13
 864:	cf 90       	pop	r12
 866:	bf 90       	pop	r11
 868:	af 90       	pop	r10
 86a:	9f 90       	pop	r9
 86c:	8f 90       	pop	r8
 86e:	7f 90       	pop	r7
 870:	6f 90       	pop	r6
 872:	5f 90       	pop	r5
 874:	4f 90       	pop	r4
 876:	3f 90       	pop	r3
 878:	2f 90       	pop	r2
 87a:	0f 90       	pop	r0
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	0f 90       	pop	r0
 880:	1f 90       	pop	r1
 882:	18 95       	reti

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
