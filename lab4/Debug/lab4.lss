
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002bc  2**0
                  ALLOC
  3 .stab         00000ba0  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007a0  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__vector_1>
   6:	00 00       	nop
   8:	a6 c0       	rjmp	.+332    	; 0x156 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	bb d0       	rcall	.+374    	; 0x212 <main>
  9c:	c2 c0       	rjmp	.+388    	; 0x222 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <setup>:
static unsigned char led2_msk = 0x01; // 0000 0001

volatile unsigned char led1_state = 0;
volatile  unsigned char led2_state = 0;

void setup() {
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	EIMSK = 0x03;
  a8:	8d e3       	ldi	r24, 0x3D	; 61
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	23 e0       	ldi	r18, 0x03	; 3
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	EICRA = 0x0f;
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f e0       	ldi	r18, 0x0F	; 15
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRB = (1<<DDB1)|(1<<DDB0);
  bc:	84 e2       	ldi	r24, 0x24	; 36
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	23 e0       	ldi	r18, 0x03	; 3
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <delay>:
void delay(){
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	00 d0       	rcall	.+0      	; 0xd2 <delay+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <delay+0x8>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long x = 0xffff;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	ab 83       	std	Y+3, r26	; 0x03
  e6:	bc 83       	std	Y+4, r27	; 0x04
	while(x--);
  e8:	00 00       	nop
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	ab 81       	ldd	r26, Y+3	; 0x03
  f0:	bc 81       	ldd	r27, Y+4	; 0x04
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	a1 05       	cpc	r26, r1
  f8:	b1 05       	cpc	r27, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <delay+0x32>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	a1 09       	sbc	r26, r1
 102:	b1 09       	sbc	r27, r1
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	ab 83       	std	Y+3, r26	; 0x03
 10a:	bc 83       	std	Y+4, r27	; 0x04
 10c:	22 23       	and	r18, r18
 10e:	69 f7       	brne	.-38     	; 0xea <delay+0x1e>
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <__vector_1>:

ISR(INT0_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	led1_state = !led1_state;
 134:	90 91 02 01 	lds	r25, 0x0102
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	99 23       	and	r25, r25
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_1+0x22>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	80 93 02 01 	sts	0x0102, r24
}
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_2>:

ISR(INT1_vect){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	led2_state = !led2_state;
 16c:	90 91 03 01 	lds	r25, 0x0103
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	99 23       	and	r25, r25
 174:	09 f0       	breq	.+2      	; 0x178 <__vector_2+0x22>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	80 93 03 01 	sts	0x0103, r24
}
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <loop>:

void loop() {
 18e:	df 93       	push	r29
 190:	cf 93       	push	r28
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	if (led1_state)
 196:	80 91 02 01 	lds	r24, 0x0102
 19a:	88 23       	and	r24, r24
 19c:	61 f0       	breq	.+24     	; 0x1b6 <loop+0x28>
		PORTB |= led1_msk ;
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	25 e2       	ldi	r18, 0x25	; 37
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	30 81       	ld	r19, Z
 1aa:	20 91 00 01 	lds	r18, 0x0100
 1ae:	23 2b       	or	r18, r19
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <loop+0x42>
	else
		PORTB &= ~led1_msk;
 1b6:	85 e2       	ldi	r24, 0x25	; 37
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	25 e2       	ldi	r18, 0x25	; 37
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	32 2f       	mov	r19, r18
 1c4:	20 91 00 01 	lds	r18, 0x0100
 1c8:	20 95       	com	r18
 1ca:	23 23       	and	r18, r19
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
	if (led2_state)
 1d0:	80 91 03 01 	lds	r24, 0x0103
 1d4:	88 23       	and	r24, r24
 1d6:	61 f0       	breq	.+24     	; 0x1f0 <loop+0x62>
		PORTB |= led2_msk;
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	25 e2       	ldi	r18, 0x25	; 37
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	30 81       	ld	r19, Z
 1e4:	20 91 01 01 	lds	r18, 0x0101
 1e8:	23 2b       	or	r18, r19
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <loop+0x7c>
	else
		PORTB &= ~led2_msk;
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	25 e2       	ldi	r18, 0x25	; 37
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	32 2f       	mov	r19, r18
 1fe:	20 91 01 01 	lds	r18, 0x0101
 202:	20 95       	com	r18
 204:	23 23       	and	r18, r19
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18

	delay();
 20a:	60 df       	rcall	.-320    	; 0xcc <delay>
 20c:	cf 91       	pop	r28
}
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <main>:

int main() {
 212:	df 93       	push	r29
 214:	cf 93       	push	r28
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	setup();
 21a:	42 df       	rcall	.-380    	; 0xa0 <setup>
 21c:	78 94       	sei
	asm("sei");
 21e:	b7 df       	rcall	.-146    	; 0x18e <loop>
	while(1)
		loop();
 220:	fe cf       	rjmp	.-4      	; 0x21e <main+0xc>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
